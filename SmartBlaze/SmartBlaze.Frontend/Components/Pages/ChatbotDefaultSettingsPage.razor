@page "/settings/chatbot"
@using SmartBlaze.Frontend.Components.Layout
@using SmartBlaze.Frontend.Dtos
@using SmartBlaze.Frontend.Models

@rendermode InteractiveServer

@inject ChatSessionStateService _chatSessionStateService
@inject SettingsService _settingsService
@inject RedirectionService _redirectionService

<PageTitle>Chatbot default settings - SmartBlaze</PageTitle>

<div id="pageRow">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col-auto pe-0">
            <img src="icons/gear-fill.svg" width="21" height="21" alt="settings icon"/>
        </div>
        <div class="col-auto">
            <span id="pageTitle">
                Settings
            </span>
        </div>
    </div>
</div>

<div id="settingsPagesContainer">
    
    <SettingsMenu/>
    
    @if (_settingsService.Chatbots is not null)
    {
        <EditForm Model="@_chatbotDefaultSettings" OnSubmit="@OnSaveClicked" autocomplete="off">
            <div class="row">
                <div class="col-3">
                    <div>
                        <label for="chatbot" class="form-label">Chatbot</label>
                        <div class="col-8">
                            <InputSelect id="chatbot" class="form-select"
                                         Value="_chatbotDefaultSettings.ChatbotName" ValueExpression="() => _chatbotDefaultSettings.ChatbotName" TValue="string"
                                         ValueChanged="(string chatbotName) => OnChatbotSelected(chatbotName)">
                                @foreach (var chatbot in _settingsService.Chatbots)
                                {
                                <option value="@chatbot.Name">@chatbot.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="mb-4">
                        <label for="apiHost" class="form-label">API Host</label>
                        <div class="col-6">
                            <InputText id="apiHost" @bind-Value="_chatbotDefaultSettings.ApiHost" class="form-control">

                            </InputText>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="apiKey" class="form-label">API Key</label>
                        <div class="row align-items-center">
                            <div class="col-6">
                                <InputText id="apiKey" type="password" @bind-Value="_chatbotDefaultSettings.ApiKey" class="form-control">

                                </InputText>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            

            <div class="border border1 mt-3 mb-3 col"></div>

            <div class="alert alert-primary col-6" role="alert">
                The settings below will be applied to newly created chat sessions.
            </div>

            <div class="row">
                <div class="col-3">
                    @if (_selectedChatbot?.TextGenerationChatbotModels is not null)
                    {
                    <div class="mb-4">
                        <label for="textGenerationChatbotModel" class="form-label">Text Generation Model</label>
                        <div class="col-8">
                            <InputSelect id="textGenerationChatbotModel" class="form-select"
                                         Value="_chatbotDefaultSettings.TextGenerationChatbotModel"
                                         ValueExpression="() => _chatbotDefaultSettings.TextGenerationChatbotModel" TValue="string"
                                         ValueChanged="(string chatbotModel) => OnTextGenerationChatbotModelSelected(chatbotModel)">
                                @foreach (var chatbotModel in _selectedChatbot.TextGenerationChatbotModels)
                                {
                                <option value="@chatbotModel.Name">@chatbotModel.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    }
                </div>

                <div class="col-3">
                    @if (_selectedChatbot?.ImageGenerationChatbotModels is not null)
                    {
                    <div class="mb-4">
                        <label for="imageGenerationChatbotModel" class="form-label">Image Generation Model</label>
                        <div class="col-8">
                            <InputSelect id="imageGenerationChatbotModel" class="form-select"
                                         Value="_chatbotDefaultSettings.ImageGenerationChatbotModel"
                                         ValueExpression="() => _chatbotDefaultSettings.ImageGenerationChatbotModel" TValue="string"
                                         ValueChanged="(string chatbotModel) => OnImageGenerationChatbotModelSelected(chatbotModel)">
                                @foreach (var chatbotModel in _selectedChatbot.ImageGenerationChatbotModels)
                                {
                                <option value="@chatbotModel.Name">@chatbotModel.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    }
                </div>
            </div>

            @if (_textGenerationChatbotModel?.AcceptTemperature == true)
            {
                <div class="mb-4">
                    <label for="temperature" class="form-label">Temperature (For Text Generation)</label>
                    <div class="d-flex">
                        <div class="col-4">
                            <input id="temperature" type="range" class="form-range" step="0.1" @bind-value="_chatbotDefaultSettings.Temperature"
                                   @oninput="OnTemperatureChanged"
                                   min="@_textGenerationChatbotModel.MinTemperature" max="@_textGenerationChatbotModel.MaxTemperature"/>
                            <div class="row align-items-center text-center">
                                <div class="col">
                                    <span class="temperature-info">
                                        Meticulous
                                    </span>
                                </div>
                                <div class="col">
                                    <span class="temperature-info">
                                        Creative
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="ms-4">
                            <span class="badge bg-primary">@_badgeTemperature</span>
                        </div>
                    </div>
                </div>
            }
            
            <div class="mt-5">
                <button class="btn btn-primary" type="button" @onclick="() => OnCancelClicked()">
                    Cancel
                </button>

                <button class="btn btn-primary ms-2" type="submit" value="Submit">
                    Save
                </button>
            </div>
        </EditForm>
    }
</div>

@code
{
    private bool _applicationStarted = false;

    private ChatbotDto? _selectedChatbot;
    private ChatbotModelDto? _textGenerationChatbotModel;
    private ChatbotModelDto? _imageGenerationChatbotModel;
    
    private ChatbotDefaultSettings _chatbotDefaultSettings = new();

    private float _badgeTemperature;
    
    
    protected override Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _settingsService.RefreshView += ReloadComponentState;
            _chatSessionStateService.RefreshView += ReloadComponentState;
        }

        if (_settingsService.ChatbotDefaultConfigurationSelected is not null)
        {
            var chatbotName = _settingsService.ChatbotDefaultConfigurationSelected?.ChatbotName;
            _selectedChatbot = _settingsService.GetChatbot(chatbotName);
        
            var textGenerationChatbotModelName = _settingsService.ChatbotDefaultConfigurationSelected?.TextGenerationChatbotModel;
            _textGenerationChatbotModel = _settingsService.GetTextGenerationChatbotModel(_selectedChatbot, textGenerationChatbotModelName);

            var imageGenerationChatbotModelName = _settingsService.ChatbotDefaultConfigurationSelected?.ImageGenerationChatbotModel;
            _imageGenerationChatbotModel = _settingsService.GetImageGenerationChatbotModel(_selectedChatbot, imageGenerationChatbotModelName);
        
            _chatbotDefaultSettings.ChatbotName = chatbotName ?? "";
            _chatbotDefaultSettings.TextGenerationChatbotModel = textGenerationChatbotModelName ?? "";
            _chatbotDefaultSettings.ImageGenerationChatbotModel = imageGenerationChatbotModelName ?? "";
            _chatbotDefaultSettings.ApiHost = _settingsService.ChatbotDefaultConfigurationSelected?.ApiHost ?? "";
            _chatbotDefaultSettings.ApiKey = _settingsService.ChatbotDefaultConfigurationSelected?.ApiKey ?? "";
            _chatbotDefaultSettings.Temperature = _settingsService.ChatbotDefaultConfigurationSelected?.Temperature ?? 0.0f;
        
            _badgeTemperature = _settingsService.ChatbotDefaultConfigurationSelected?.Temperature ?? 0.0f;
        }
        
        
        return base.OnInitializedAsync();
    }

    private void OnChatbotSelected(string chatbotName)
    {
        _selectedChatbot = _settingsService.GetChatbot(chatbotName);
        var selectedChatbotDefaultConfiguration = _settingsService.GetChatbotDefaultConfiguration(chatbotName);
        
        _textGenerationChatbotModel = _settingsService.GetTextGenerationChatbotModel(_selectedChatbot, 
            selectedChatbotDefaultConfiguration?.TextGenerationChatbotModel);
        _chatbotDefaultSettings.TextGenerationChatbotModel = _textGenerationChatbotModel?.Name ?? "";

        _imageGenerationChatbotModel = _settingsService.GetImageGenerationChatbotModel(_selectedChatbot, 
            selectedChatbotDefaultConfiguration?.ImageGenerationChatbotModel);
        _chatbotDefaultSettings.ImageGenerationChatbotModel = _imageGenerationChatbotModel?.Name ?? "";
       
        _chatbotDefaultSettings.ChatbotName = chatbotName;
        _chatbotDefaultSettings.ApiHost = selectedChatbotDefaultConfiguration?.ApiHost ?? "";
        _chatbotDefaultSettings.ApiKey = selectedChatbotDefaultConfiguration?.ApiKey ?? "";
        _chatbotDefaultSettings.Temperature = selectedChatbotDefaultConfiguration?.Temperature ?? 0.0f;
        
        _badgeTemperature = selectedChatbotDefaultConfiguration?.Temperature ?? 0.0f;
    }

    private void OnTextGenerationChatbotModelSelected(string chatbotModel)
    {
        _chatbotDefaultSettings.TextGenerationChatbotModel = chatbotModel;
        _textGenerationChatbotModel = _settingsService.GetTextGenerationChatbotModel(_selectedChatbot, chatbotModel);
    }

    private void OnImageGenerationChatbotModelSelected(string chatbotModel)
    {
        _chatbotDefaultSettings.ImageGenerationChatbotModel = chatbotModel;
        _imageGenerationChatbotModel = _settingsService.GetImageGenerationChatbotModel(_selectedChatbot, chatbotModel);
    }

    private async void OnSaveClicked()
    {
        await _settingsService.SaveChatbotDefaultSettings(_chatbotDefaultSettings);
    }
    
    private async void OnCancelClicked()
    {
        _settingsService.CloseSettings();
        
        if (_chatSessionStateService.ChatSessions?.Count > 0)
        {
            await _chatSessionStateService.SelectChatSession(_chatSessionStateService.ChatSessions.ElementAt(0));
        }
        else
        {
            _redirectionService.Url = "/";
        }
    }

    private void OnTemperatureChanged(ChangeEventArgs e)
    {
        _badgeTemperature = Convert.ToSingle(e.Value);
    }

    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}