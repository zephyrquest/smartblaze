@using SmartBlaze.Frontend.Dtos
@using System.Text.RegularExpressions
@using System.Web

@rendermode InteractiveServer

<div class="d-flex">
    @if (message.Role == "user")
    {
    <div>
        <img src="icons/person-fill.svg" width="28" height="28" alt="user icon" title="user"/>
    </div>
    <div class="ps-3 pe-3 pb-5 pt-1">
        <div>
            <pre class="mb-0">@message.Text</pre>
        </div>

        @if (message.MediaDtos is not null && message.MediaDtos.Count > 0)
        {
            <div class="row row-cols-4 align-items-center justify-content-start mb-1">
                @foreach (var mediaDto in message.MediaDtos)
                {
                    @if (mediaDto.ContentType.StartsWith("image"))
                    {
                        @if (mediaDto.Data is not null)
                        {
                            <div class="col py-2 image-container">
                                @if (mediaDto.Data.StartsWith("http"))
                                {
                                    <img src="@mediaDto.Data" alt="user image" class="img-thumbnail"
                                         title="@mediaDto.Name"/>
                                }
                                else
                                {
                                    <img src="data:@mediaDto.ContentType;base64, @mediaDto.Data" alt="user image" class="img-thumbnail" title="@mediaDto.Name"/>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-1 py-2">
                            <div class="border border-3 rounded-3 px-2 py-3 file-input-container" title="@mediaDto.Name">
                                <div class="d-flex justify-content-center mb-1">
                                    <img src="icons/file-earmark-text.svg" width="20" alt="file icon"/>
                                </div>
                                <div class="d-flex justify-content-center">
                                    <span class="file-name">
                                        @if (mediaDto.Name?.Length > 10)
                                         {
                                            @(mediaDto.Name.Substring(0, 9).Replace(" ", "") + "..")
                                         }
                                         else
                                         {
                                            @mediaDto.Name?.Replace(" ", "")
                                         }
                                    </span>                                   
                                </div>
                            </div>
                        </div>
                    } 
                }
            </div>
        }
    </div>
    }
    else if (message.Role == "assistant")
    {
    <div>
        <img src="icons/robot.svg" width="28" height="28" alt="assistant icon" title="assistant"/>
    </div>
    <div class="ps-3 pe-3 pb-5 pt-1">
        @{
        var encodedText = HttpUtility.HtmlEncode(message.Text ?? "");

        var quotesRegex = new Regex(@"([`'´])([^`\r\n\t]+?)([`'´])");
        var doubleStarRegex = new Regex(@"(\d+\.\s*)?\*\*([^`\r\n\t]+?)\*\*");
        var hashRegex = new Regex(@"### ([^`\r\n\t]+?)([\n\r])");
        var codeRegex = new Regex(@"```(.*)((?:(?!```)[\s\S])*)```");

        var processedText = quotesRegex.Replace(encodedText,
        "<span class=\"quoted-text\">$1$2$3</span>");

        processedText = doubleStarRegex.Replace(processedText, "<span class=\"double-star-text\">$1$2</span>");

        processedText = hashRegex.Replace(processedText, "<span class=\"hash-text\">$1$2</span>");
        
        processedText = codeRegex.Replace(processedText,
        match =>
        {
        var language = !string.IsNullOrEmpty(match.Groups[1].Value) ? match.Groups[1].Value : "text";
        var code = match.Groups[2].Value;
        
        return $"<code class=\"language-{language}\">&lt;{language.ToUpper()}&gt;{code}</code>";
        });
        }
        <div>
            <pre class="mb-0 @message.Status">@(new MarkupString(processedText))</pre>
        </div>

        @if (message.MediaDtos is not null && message.MediaDtos.Count > 0)
        {
        <div class="row row-cols-4 align-items-center justify-content-start mb-1">
            @foreach (var mediaDto in message.MediaDtos)
            {
            @if (mediaDto.Data is not null)
            {
            <div class="col py-2 image-container">
                @if (mediaDto.Data.StartsWith("http"))
                {
                <img src="@mediaDto.Data" alt="assistant generated image" class="img-thumbnail"
                     title="@mediaDto.Name"/>
                }
                else
                {
                <img src="data:@mediaDto.ContentType;base64, @mediaDto.Data" alt="user image" class="img-thumbnail" title="@mediaDto.Name"/>
                }
            </div>
            }
            }
        </div>
        }

        <div>
            @if (!string.IsNullOrEmpty(message.ChatbotName) && !string.IsNullOrEmpty(message.ChatbotModel))
            {
            <span class="text-secondary chatbot-info">@message.ChatbotName</span>
            <span> - </span>
            <span class="text-secondary chatbot-info">@message.ChatbotModel</span>
            }
        </div>
    </div>
    }
</div>


@code {
    [Parameter] public MessageDto message { get; set; } = new();
    
    
}